# export.run
# SYNOPSIS:
#   include load.run; include export.run;
# DESCRIPTION: 
#   Exports results from AMPL to text files for each carbon cost that has a solution file. Can operate with several workers if the worker_id and num_workers parameters are set. 
# ADVANCED USAGE:
#   # Worker 1:
#   include load.run; let worker_id := 0; let num_workers := 2; include export.run;
#   # Worker 2:
#   include load.run; let worker_id := 1; let num_workers := 2; include export.run;


# Compile a binary problem file for each carbon cost.
for {c in CARBON_COSTS} { 
  # Only work on this carbon cost if it matches this worker id. 
	if (ord(c) mod num_workers = worker_id ) then {
		let carbon_cost := c;
    
    # Export results if the solution file exists. 
		if ( file_exists(solution_path) ) then {
			printf "\nLoading solution from disk for a carbon cost of %d.\n", carbon_cost;
			let curtime := time();
			solution (solution_path);
			printf "%d seconds to create a problem instance and load a solution from disk.\n", (time() - curtime);
			# Delete the problem .nl file to save disk space if we have made it this far and the problem file still exists
			shell( "[ -f '" & problem_path & "' ] && rm '" & problem_path & "'" );
			
			# update recording variables and show some info about this run
			let curtime := time();
			include basicstats.run;
			printf "%d seconds to calculate basic statistics.\n", (time() - curtime);

      let curtime := time();
           
      #######################
      # store all hourly generation data in standardized, MW terms
      # followed by all hourly storage dispatch decisions
      
      # hourly power production from each source
      # as well as total CO2 emissions per hour, heat rate, variable costs per MWh
      # storage is included here with a fuel of 'Storage' and power < 0 when storing
      let output_section := 'generator_and_storage_dispatch';
      let outfile := results_path & sprintf( result_file_path_templates[output_section], carbon_cost );
      if ( file_exists(outfile) == 0 ) then {
      printf "scenario_id	carbon_cost	period	project_id	load_area_id	load_area	date	hour	technology_id	technology	new	baseload	cogen	storage	fuel	fuel_category	hours_in_sample	power	co2_tons	heat_rate	fuel_cost	carbon_cost_hourly	variable_o_m\n"
        > (outfile); }
      
      # New Plants
      printf {(pid, a, t, p, h) in PROJECT_VINTAGE_HOURS: t <> 'Battery_Storage' and Power_Produced[pid, a, t, p, h] > 0.001} 
        "%s	%d	%d	%d	%d	%s	%d	%d	%d	%s	%d	%d	%d	%d	%s	%s	%.2f	%.2f	%.2f	%.2f	%.2f	%.2f	%.2f\n",
        scenario_id, carbon_cost, p, pid, load_area_id[a], a,
        (if present_day_optimization then present_day_date[h] else date[h]),
        (if present_day_optimization then present_day_timepoint[h] else h),
        technology_id[t], t, 1, baseload[t], 0, 0, fuel[t], rps_fuel_category[fuel[t]], hours_in_sample[h],
        Power_Produced[pid, a, t, p, h], 
        Carbon_Emissions[pid, a, t, p, h],
        heat_rate[t], 
        Fuel_Cost_Incurred_Hourly[pid, a, t, p, h],
        Carbon_Cost_Incurred_Hourly[pid, a, t, p, h],
        Variable_Cost_Incurred_Hourly[pid, a, t, p, h]
        >> (outfile);
      
      
      # Existing Plants
      printf {(pid, a, t, p, h) in EP_AVAILABLE_HOURS: ProducePowerEP[pid, a, t, p, h] > 0.001} 
        "%s	%d	%d	%d	%d	%s	%d	%d	%d	%s	%d	%d	%d	%d	%s	%s	%.2f	%.2f	%.2f	%.2f	%.2f	%.2f	%.2f\n",
        scenario_id, carbon_cost, p, pid, load_area_id[a], a,
        (if present_day_optimization then present_day_date[h] else date[h]),
        (if present_day_optimization then present_day_timepoint[h] else h),
        technology_id[t], t, 0, baseload[t], cogen[t], 0, fuel[t], rps_fuel_category_tech[t], hours_in_sample[h],
        ProducePowerEP[pid, a, t, p, h], 
        EP_Carbon_Emissions[pid, a, t, p, h],
        ep_heat_rate[pid, a, t], 
        EP_Fuel_Cost_Incurred_Hourly[pid, a, t, p, h],
        EP_Carbon_Cost_Incurred_Hourly[pid, a, t, p, h],
        EP_Variable_Cost_Incurred_Hourly[pid, a, t, p, h]
        >> (outfile);
      
      
      # Store all STORAGE DISPATCH decisions.  Don't have to pay variable O&M for storing at the moment.
      printf {  (pid, a, t, p, h) in AVAILABLE_HOURS, fc in RPS_FUEL_CATEGORY: storage[t]
              and not ( -0.01 < Storage_Net_Power[pid, a, t, p, h, fc] < 0.01 ) } 
        "%s	%d	%d	%d	%d	%s	%d	%d	%d	%s	%d	%d	%d	%d	%s	%s	%.2f	%.2f	%.2f	%.2f	%.2f	%.2f	%.2f\n",
        scenario_id, carbon_cost, p, pid, load_area_id[a], a,
        (if present_day_optimization then present_day_date[h] else date[h]),
        (if present_day_optimization then present_day_timepoint[h] else h),
        technology_id[t], t, can_build_new[t], 0, 0, 1, 'Storage', fc, hours_in_sample[h],
        Storage_Net_Power[pid, a, t, p, h, fc],
        0, 0, 0, 0,
        Storage_Variable_Cost_Incurred_Hourly[pid, a, t, p, h, fc]
        >> (outfile);
      
      close (outfile);
      
      
      #######################
      # store all generation CAPACITY data in standardized, MW terms
      # (these are quoted as total capacity installed up through each study period)
      
      let output_section := 'generation_capacity';
      let outfile := results_path & sprintf( result_file_path_templates[output_section], carbon_cost );
      if ( file_exists(outfile) == 0 ) then {
      printf "scenario_id	carbon_cost	period	project_id	load_area_id	load_area	technology_id	technology	site	new	baseload	cogen	fuel	capacity	capital_cost	fixed_o_m_cost\n"
        > (outfile); }
      
      # New Plants, inclusive of new storage projects
      printf {(pid, a, t, p) in PROJECT_VINTAGES: Installed_To_Date[pid, a, t, p]  > 0.001}
        "%s	%d	%d	%d	%d	%s	%d	%s	%s	%d	%d	%d	%s	%.2f	%.2f	%.2f\n",
        scenario_id, carbon_cost, p, pid, load_area_id[a], a, technology_id[t], t, project_location[pid, a, t], 1, baseload[t], 0, fuel[t],
        Installed_To_Date[pid, a, t, p],
        Capital_Payments_by_Plant_and_Period[pid, a, t, p],
        Fixed_OM_by_Plant_and_Period[pid, a, t, p]
        >> (outfile);
      
      # existing plants (either baseload or dispatchable)
      # note: they're only counted as "capacity" if they are operable during this period
      # as cogen plants can have their life extended past ep_end_year,
      # their capital cost are included here only if they are operated past their normal lifetime
      # existing intermittent plants generally have low operational costs and are therefore kept running
      printf {(pid, a, t, p) in EP_PERIODS}
        "%s	%d	%d	%d	%d	%s	%d	%s	%s	%d	%d	%d	%s	%.2f	%.2f	%.2f\n",
        scenario_id, carbon_cost, p, pid, load_area_id[a], a, technology_id[t], t,
        ep_plant_name[pid, a, t], 0, baseload[t], cogen[t], fuel[t],
        ( if ( intermittent[t] or hydro[t] ) then 1 else OperateEPDuringPeriod[pid, a, t, p] ) * ep_capacity_mw[pid, a, t],
        EP_Capital_Payments_by_Plant_and_Period[pid, a, t, p], 
        EP_Fixed_OM_by_Plant_and_Period[pid, a, t, p]
        >> (outfile);
      
      close (outfile);
      
      ########################
      # store all trans capacity between zones
      let output_section := 'transmission_capacity';
      let outfile := results_path & sprintf( result_file_path_templates[output_section], carbon_cost );
      if ( file_exists(outfile) == 0 ) then {
      printf "scenario_id	carbon_cost	period	transmission_line_id	start_id	end_id	start	end	new	trans_mw	fixed_cost\n"
        > (outfile); }
      
      # existing lines
      # the cost of the existing transmission grid is calculated in the param transmission_sunk_cost and is not included here
      # because it includes all lines, not just the lines between load areas
      printf {(a1, a2) in TRANSMISSION_LINES, p in PERIODS}:
        "%s	%d	%d	%d	%d	%d	%s	%s	%d	%.2f	%d\n",
        scenario_id, carbon_cost, p, transmission_line_id[a1, a2], load_area_id[a1], load_area_id[a2], a1, a2, 0,
        existing_transfer_capacity_mw[a1, a2], 0
        >> (outfile);
      
      # new lines
      printf {(a1, a2) in TRANSMISSION_LINES_NEW_BUILDS_ALLOWED, p in PERIODS }:
        "%s	%d	%d	%d	%d	%d	%s	%s	%d	%.2f	%d\n",
        scenario_id, carbon_cost, p, transmission_line_id[a1, a2], load_area_id[a1], load_area_id[a2], a1, a2, 1, 
        sum {install_yr in PERIODS: install_yr <= p < transmission_end_year[install_yr]} InstallTrans[a1, a2, install_yr],
        Transmission_New_Cost_Per_Period[a1, a2, p]
        >> (outfile);
      
      close (outfile);
      
      #######################
      # store hourly TRANSMISSION decisions in standardized, MW terms
      
      let output_section := 'transmission_dispatch';
      let outfile := results_path & sprintf( result_file_path_templates[output_section], carbon_cost );
      if ( file_exists(outfile) == 0 ) then {
      printf "scenario_id	carbon_cost	period	transmission_line_id	load_area_receive_id	load_area_from_id	load_area_receive	load_area_from	date	hour	rps_fuel_category	power_sent	power_received	hours_in_sample\n"
        > (outfile); }
      
      # detailed imports & exports
      printf {(x, y) in TRANSMISSION_LINES, h in TIMEPOINTS, fc in RPS_FUEL_CATEGORY: DispatchTransFromXToY[x, y, h, fc] > 0.001} 
        "%s	%d	%d	%d	%d	%d	%s	%s	%d	%d	%s	%.2f	%.2f	%.2f\n",
        scenario_id, carbon_cost, period[h], transmission_line_id[x, y], load_area_id[y], load_area_id[x], y, x,
        (if present_day_optimization then present_day_date[h] else date[h]),
        (if present_day_optimization then present_day_timepoint[h] else h),
        fc, DispatchTransFromXToY[x, y, h, fc],
        DispatchTransFromXToY[x, y, h, fc] * transmission_efficiency[x, y],
        hours_in_sample[h]
        >> (outfile);
      close (outfile);
      
      ########################
      # store the costs of all existing transmission capacity and reduced costs of the RPS constraint
      let output_section := 'existing_trans_cost_and_rps_reduced_cost';
      let outfile := results_path & sprintf( result_file_path_templates[output_section], carbon_cost );
      if ( file_exists(outfile) == 0 ) then {
      printf "scenario_id	carbon_cost	period	load_area_id	load_area	existing_trans_cost	rps_reduced_cost\n"
        > (outfile); }
      
      if (enable_rps = 1) then {
        printf {a in LOAD_AREAS, p in PERIODS: rps_compliance_fraction_in_period [a, p] > 0 }:
          "%s	%d	%d	%d	%s	%.2f	%.2f\n",
          scenario_id, carbon_cost, p, load_area_id[a], a,
          Transmission_Existing_Cost_Per_Period[a, p],
          Satisfy_RPS[a, p]
          >> (outfile);
        printf {a in LOAD_AREAS, p in PERIODS: rps_compliance_fraction_in_period [a, p] = 0 }:
          "%s	%d	%d	%d	%s	%.2f	%.2f\n",
          scenario_id, carbon_cost, p, load_area_id[a], a,
          Transmission_Existing_Cost_Per_Period[a, p],
          0
          >> (outfile);
       } else {
        printf {a in LOAD_AREAS, p in PERIODS}:
          "%s	%d	%d	%d	%s	%.2f	%.2f\n",
          scenario_id, carbon_cost, p, load_area_id[a], a,
          Transmission_Existing_Cost_Per_Period[a, p],
          0
          >> (outfile);
      }
      
      close (outfile);
      
      ########################
      # store local T&D capacity within each zone
      let output_section := 'local_td_capacity';
      let outfile := results_path & sprintf( result_file_path_templates[output_section], carbon_cost );
      if ( file_exists(outfile) == 0 ) then {
      printf "scenario_id	carbon_cost	period	load_area_id	load_area	new	local_td_mw	fixed_cost\n"
        > (outfile); }
      
      # existing local T&D - assumed to be equal to the planning reserve margin above max_coincident_load_for_local_td 
      printf {a in LOAD_AREAS, p in PERIODS}:
        "%s	%d	%d	%d	%s	%d	%.2f	%.2f\n",
        scenario_id, carbon_cost, p, load_area_id[a], a, 0,
        existing_local_td[a],
        Local_TD_Existing_Cost_Per_Period[a, p]
        >> (outfile);
      
      # newly installed local T&D
      printf {a in LOAD_AREAS, p in PERIODS}:
        "%s	%d	%d	%d	%s	%d	%.2f	%.2f\n",
        scenario_id, carbon_cost, p, load_area_id[a], a, 1,
        sum {install_yr in PERIODS: install_yr <= p < local_td_end_year[install_yr]} install_local_td[a, install_yr],
        Local_TD_New_Cost_Per_Period[a, p]
        >> (outfile);
      
      close (outfile);
      
      #######################
      # system LOAD
      let output_section := 'system_load';
      let outfile := results_path & sprintf( result_file_path_templates[output_section], carbon_cost );
      if ( file_exists(outfile) == 0 ) then {
      printf "scenario_id	carbon_cost	period	load_area_id	load_area	date	hour	hours_in_sample	power	satisfy_load_reduced_cost	satisfy_load_reserve_reduced_cost\n"
        > (outfile); }
      
      printf {a in LOAD_AREAS, h in TIMEPOINTS, p in PERIODS: period[h]=p} 
        "%s	%d	%d	%d	%s	%d	%d	%.2f	%.2f	%.2f	%.2f\n",
        scenario_id, carbon_cost, p, load_area_id[a], a, date[h], h, hours_in_sample[h], system_load[a, h], Satisfy_Load[a, h], Satisfy_Load_Reserve[a, h]
        >> (outfile);
      close (outfile);
      
      #######################
      # Export .tab files of investment decisions for dispatch to read in. 
      
      # Installed generation
      printf "ampl.tab 4 1\npid	a	t	p	InstallGen\n"
        > (InstallGen_tab_path);
      printf {(pid, a, t, p) in PROJECT_VINTAGES} 
        "%d	%s	%s	%d	%.2f\n",
        pid, a, t, p, InstallGen[pid, a, t, p]
        >> (InstallGen_tab_path);
      close (InstallGen_tab_path);
      
      # Whether to operate existing plants in each future period
      printf "ampl.tab 4 1\npid	a	t	p	OperateEPDuringPeriod\n"
        > (OperateEPDuringPeriod_tab_path);
      printf {(pid, a, t, p) in EP_PERIODS: not intermittent[t] and not hydro[t]} 
        "%d	%s	%s	%d	%d\n",
        pid, a, t, p, OperateEPDuringPeriod[pid, a, t, p]
        >> (OperateEPDuringPeriod_tab_path);
      close (OperateEPDuringPeriod_tab_path);
      
      # Installed Transmission
      printf "ampl.tab 3 1\na1	a2	p	InstallTrans\n"
        > (InstallTrans_tab_path);
      printf {(a1, a2) in TRANSMISSION_LINES_NEW_BUILDS_ALLOWED, p in PERIODS} 
        "%s	%s	%d	%.2f\n",
        a1, a2, p, InstallTrans[a1, a2, p]
        >> (InstallTrans_tab_path);
      close (InstallTrans_tab_path);
      
      # Installed Local T & D
      printf "ampl.tab 2 1\na	p	install_local_td\n"
        > (install_local_td_tab_path);
      printf {a in LOAD_AREAS, p in PERIODS} 
        "%s	%d	%.2f\n",
        a, p, install_local_td[a, p]
        >> (install_local_td_tab_path);
      close (install_local_td_tab_path);
      
      printf "%d seconds to store results for carbon cost %d.\n", time()-curtime, carbon_cost;
    }
  }
}