# Calculate Transmission losses
for {p in PERIODS} {
  let transmission_losses_by_period[p] := 
    sum {(x, y) in TRANSMISSION_LINES, h in TIMEPOINTS, fuel_cat in RPS_FUEL_CATEGORY: period[h]==p}
      DispatchTransFromXToY[x, y, h, fuel_cat] * (1-transmission_efficiency[x, y] ) * hours_in_sample[h];
}

printf "\nTax=%d: cost=$%3.2f/MWh ", 
  # Carbon Cost
  carbon_cost,
  # Power Cost
  (Power_Cost - (0
		# Carbon cost adder for new dispatchable projects
		+ sum {(pid, a, t) in PROJ_DISPATCH, h in TIMEPOINTS}
			DispatchGen[pid, a, t, h] * (carbon_cost_per_mwh[t, h])
		# Carbon cost adder for existing baseload plants
		+ sum {(a, e, p) in EP_BASELOAD_PERIODS, h in TIMEPOINTS: period[h]=p}
			OperateEPDuringPeriod[a, e, p] * (1-ep_forced_outage_rate[a, e]) * (1-ep_scheduled_outage_rate[a, e]) * ep_size_mw[a, e]
			* (ep_carbon_cost_per_mwh[a, e, h])
		# Carbon cost adder for existing dispatchable projects
		+ sum {(a, e, h) in EP_DISPATCH_HOURS}
			DispatchEP[a, e, h]
			* (ep_carbon_cost_per_mwh[a, e, h])
	)) / system_load_discounted;

printf "\nPercentage of power produced by each fuel in the given investment periods, expressed as a fraction of total power produced.\n";

for {p in PERIODS} {
	printf "%.0d:\t", p;
	let total_power_produced_by_period[p] := (
		# Intermittent
		sum {(pid, a, t, install_yr, h) in PROJ_INTERMITTENT_VINTAGE_HOURS: period[h]=p }
		   (1-forced_outage_rate[t]) * cap_factor[pid, a, t, h] * InstallGen[pid, a, t, install_yr] * hours_in_sample[h]
		+
		# New dispatchable projects
		sum {(pid, a, t) in PROJ_DISPATCH, h in TIMEPOINTS: period[h]=p } 
		   DispatchGen[pid, a, t, h] * hours_in_sample[h]
		+
		# Existing dispatchable plants
		sum {(a, e, h) in EP_DISPATCH_HOURS: period[h]=p } 
		   DispatchEP[a, e, h] * hours_in_sample[h]
		+
		# Existing Intermittent plants
		sum {(a, e, h) in EP_INTERMITTENT_OPERATIONAL_HOURS: period[h]=p } 
		   OperateEPDuringPeriod[a, e, period[h]] * ep_size_mw[a, e] * eip_cap_factor[a, e, h] * (1-ep_forced_outage_rate[a, e]) * hours_in_sample[h]
		+
		# New baseload plants
		sum {(pid, a, t, install_yr, h) in NEW_BASELOAD_VINTAGE_HOURS: period[h]=p} 
		   (1-forced_outage_rate[t]) * (1-scheduled_outage_rate[t]) * InstallGen[pid, a, t, install_yr] * hours_in_sample[h]
		+ 
		# existing baseload plants
		sum {(a, e, p) in EP_BASELOAD_PERIODS, h in TIMEPOINTS: period[h]=p and p=p} 
		   OperateEPDuringPeriod[a, e, p] * (1-ep_forced_outage_rate[a, e]) * (1-ep_scheduled_outage_rate[a, e]) * ep_size_mw[a, e] * hours_in_sample[h]
		+
		# Hydro
		sum {a in LOAD_AREAS, h in TIMEPOINTS: period[h]=p} (
		   # pumped hydro, de-rated to reflect occasional unavailability of the hydro plants
		   (sum {(a, s) in PROJ_HYDRO} DispatchHydro[a, s, h]) * (1 - forced_outage_rate_hydro) * hours_in_sample[h]
		   - 
		   (sum {(a, s) in PROJ_PUMPED_HYDRO} StorePumpedHydro[a, s, h]) * (1 - forced_outage_rate_hydro) * (1/pumped_hydro_efficiency) * hours_in_sample[h]
		 )
	);
	
	printf { f in FUELS } "%s=%2d\%, ", 
	  f, 
	  100 * (
		# Intermittent
		sum {(pid, a, t, install_yr, h) in PROJ_INTERMITTENT_VINTAGE_HOURS: period[h]=p and fuel[t] = f}
		   (1-forced_outage_rate[t]) * cap_factor[pid, a, t, h] * InstallGen[pid, a, t, install_yr] * hours_in_sample[h]
		+
		# New dispatchable projects
		sum {(pid, a, t) in PROJ_DISPATCH, h in TIMEPOINTS: period[h]=p and fuel[t] = f} 
		   DispatchGen[pid, a, t, h] * hours_in_sample[h]
		+
		# Existing dispatchable plants
		sum {(a, e, h) in EP_DISPATCH_HOURS: period[h]=p and ep_fuel[a,e] = f} 
		   DispatchEP[a, e, h] * hours_in_sample[h]
		+
		# Existing Intermittent plants
		sum {(a, e, h) in EP_INTERMITTENT_OPERATIONAL_HOURS: period[h]=p and ep_fuel[a,e] = f} 
		   OperateEPDuringPeriod[a, e, period[h]] * ep_size_mw[a, e] * eip_cap_factor[a, e, h] * (1-ep_forced_outage_rate[a, e]) * hours_in_sample[h]
		+
		# New baseload plants
		sum {(pid, a, t, install_yr, h) in NEW_BASELOAD_VINTAGE_HOURS: period[h]=p and fuel[t] = f} 
		   (1-forced_outage_rate[t]) * (1-scheduled_outage_rate[t]) * InstallGen[pid, a, t, install_yr] * hours_in_sample[h]
		+ 
		# existing baseload plants
		sum {(a, e, p) in EP_BASELOAD_PERIODS, h in TIMEPOINTS: period[h]=p and p=p and ep_fuel[a,e] = f} 
		   OperateEPDuringPeriod[a, e, p] * (1-ep_forced_outage_rate[a, e]) * (1-ep_scheduled_outage_rate[a, e]) * ep_size_mw[a, e] * hours_in_sample[h]
		+
		# Hydro
		( if( f = fuel_hydro )
		  then (
			 sum {a in LOAD_AREAS, h in TIMEPOINTS: period[h]=p} (
			   # pumped hydro, de-rated to reflect occasional unavailability of the hydro plants
			   (sum {(a, s) in PROJ_HYDRO} DispatchHydro[a, s, h]) * (1 - forced_outage_rate_hydro) * hours_in_sample[h]
			   - 
			   (sum {(a, s) in PROJ_PUMPED_HYDRO} StorePumpedHydro[a, s, h]) * (1 - forced_outage_rate_hydro) * (1/pumped_hydro_efficiency) * hours_in_sample[h]
			 )
		  )
		  else 0
		)
	  )
	  / total_power_produced_by_period[p]
	  # Add .5% for rounding purposes
	  + .5
	;
	
	printf "\n   Transmission Losses=%2d\%\n   Spilled=%2d\%\n", 
		100 * (transmission_losses_by_period[p]) / total_power_produced_by_period[p], 
		100 * (total_power_produced_by_period[p] - total_loads_by_period_weighted[p] - transmission_losses_by_period[p]) / total_power_produced_by_period[p];
	
	printf "Total Load  = %.0d\n", total_loads_by_period_weighted[p];
	printf "Total Trans Losses  = %.0d\n", transmission_losses_by_period[p];
	printf "Total Spilled = %.0d\n", total_power_produced_by_period[p] - total_loads_by_period_weighted[p] - transmission_losses_by_period[p];
	printf "Total Power = %.0d\n", total_power_produced_by_period[p];
	
	printf "\n";
}