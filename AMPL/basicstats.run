# Calculate Transmission losses
for {p in PERIODS} {
  let transmission_losses_by_period[p] := 
    sum {(a1, a2) in TRANSMISSION_LINES, h in TIMEPOINTS, fc in RPS_FUEL_CATEGORY: period[h]==p}
      DispatchTransFromXToY[a1, a2, h, fc] * (1-transmission_efficiency[a1, a2] ) * hours_in_sample[h];
  let storage_losses_by_period[p] := 
    sum {(a, pid) in PROJ_PUMPED_HYDRO, h in TIMEPOINTS, fc in RPS_FUEL_CATEGORY: period[h]==p}
		Store_Pumped_Hydro[a, pid, h, fc] * (1-pumped_hydro_efficiency) * hours_in_sample[h];
}

printf "\nTax=%d: cost=$%3.2f/MWh ", 
  # Carbon Cost
  carbon_cost,
  # Power Cost
  (Power_Cost - (0
		# Carbon cost adder for new dispatchable projects
		+ sum {(pid, a, t) in PROJ_DISPATCH, h in TIMEPOINTS}
			DispatchGen[pid, a, t, h] * carbon_cost_per_mwh[t, h]
		# Carbon cost adder for existing baseload plants
		+ sum {(a, e, p) in EP_BASELOAD_PERIODS, h in TIMEPOINTS: period[h]=p}
			OperateEPDuringPeriod[a, e, p] * ( 1 - ep_forced_outage_rate[a, e] ) * ( 1 - ep_scheduled_outage_rate[a, e] )
			* ep_size_mw[a, e] * ep_carbon_cost_per_mwh[a, e, h]
		# Carbon cost adder for existing dispatchable projects
		+ sum {(a, e, h) in EP_DISPATCH_HOURS}
			DispatchEP[a, e, h] * ep_carbon_cost_per_mwh[a, e, h]
	)) / system_load_discounted;

printf "\nPercentage of power produced by each fuel in the given investment periods, expressed as a fraction of total power produced.\n";

for {p in PERIODS} {
	printf "%.0d:\t", p;
	let total_power_produced_by_period[p] := (
		# New dispatchable projects
		sum {(pid, a, t) in PROJ_DISPATCH, h in TIMEPOINTS: period[h]=p} 
		   DispatchGen[pid, a, t, h] * hours_in_sample[h]
		+
		# Intermittent
		sum {(pid, a, t, install_yr, h) in PROJ_INTERMITTENT_VINTAGE_HOURS: period[h]=p}
		   InstallGen[pid, a, t, install_yr] * ( 1 - forced_outage_rate[t] ) * cap_factor[pid, a, t, h] * hours_in_sample[h]
		+
		# New baseload plants
		sum {(pid, a, t, install_yr, h) in NEW_BASELOAD_VINTAGE_HOURS: period[h]=p} 
		   InstallGen[pid, a, t, install_yr] * ( 1 - forced_outage_rate[t] ) * ( 1 - scheduled_outage_rate[t] ) * hours_in_sample[h]
		+ 
		# Existing dispatchable plants
		sum {(a, e, h) in EP_DISPATCH_HOURS: period[h]=p} 
		   DispatchEP[a, e, h] * hours_in_sample[h]
		+
		# Existing Intermittent plants
		sum {(a, e, h) in EP_INTERMITTENT_OPERATIONAL_HOURS: period[h]=p} 
		   OperateEPDuringPeriod[a, e, period[h]] * ep_size_mw[a, e] * eip_cap_factor[a, e, h] * ( 1 - ep_forced_outage_rate[a, e] ) * hours_in_sample[h]
		+
		# existing baseload plants
		sum {(a, e, p) in EP_BASELOAD_PERIODS, h in TIMEPOINTS: period[h]=p } 
		   OperateEPDuringPeriod[a, e, p] * ( 1 - ep_forced_outage_rate[a, e] ) * ( 1 - ep_scheduled_outage_rate[a, e] ) * ep_size_mw[a, e] * hours_in_sample[h]
		+
		# Hydro
			# non pumped hydro dispatch
		+ sum {(a, pid) in PROJ_NONPUMPED_HYDRO, h in TIMEPOINTS: period[h]=p}
				Dispatch_NonPumped_Hydro[a, pid, h] * hours_in_sample[h]
			# pumped hydro dispatch of water from upstream
		+ sum {(a, pid) in PROJ_PUMPED_HYDRO, h in TIMEPOINTS: period[h]=p}
				Dispatch_Pumped_Hydro_Watershed_Electrons[a, pid, h] * hours_in_sample[h]
			# pumped hydro dispatch of water that was pumped uphill in other parts of the day	
		+ sum {(a, pid) in PROJ_PUMPED_HYDRO, h in TIMEPOINTS, fc in RPS_FUEL_CATEGORY: period[h]=p}
				Dispatch_Pumped_Hydro_Storage[a, pid, h, fc] * hours_in_sample[h]
			# pumped hydro while storing: this variable represents the load on the grid from pumping
		- sum {(a, pid) in PROJ_PUMPED_HYDRO, h in TIMEPOINTS, fc in RPS_FUEL_CATEGORY: period[h]=p}
				Store_Pumped_Hydro[a, pid, h, fc] * hours_in_sample[h]
	);
	
	printf { f in FUELS } "%s=%2.0f\%, ", 
	  f, 
	  100 * (
		# New dispatchable projects
		sum {(pid, a, t) in PROJ_DISPATCH, h in TIMEPOINTS: period[h]=p and fuel[t] = f} 
		   DispatchGen[pid, a, t, h] * hours_in_sample[h]
		+
		# Intermittent
		sum {(pid, a, t, install_yr, h) in PROJ_INTERMITTENT_VINTAGE_HOURS: period[h]=p and fuel[t] = f}
		   InstallGen[pid, a, t, install_yr] * ( 1 - forced_outage_rate[t] ) * cap_factor[pid, a, t, h] * hours_in_sample[h]
		+
		# New baseload plants
		sum {(pid, a, t, install_yr, h) in NEW_BASELOAD_VINTAGE_HOURS: period[h]=p and fuel[t] = f} 
		   InstallGen[pid, a, t, install_yr] * ( 1 - forced_outage_rate[t] ) * (1-scheduled_outage_rate[t]) * hours_in_sample[h]
		+ 
		# Existing dispatchable plants
		sum {(a, e, h) in EP_DISPATCH_HOURS: period[h]=p and ep_fuel[a,e] = f} 
		   DispatchEP[a, e, h] * hours_in_sample[h]
		+
		# Existing Intermittent plants
		sum {(a, e, h) in EP_INTERMITTENT_OPERATIONAL_HOURS: period[h]=p and ep_fuel[a,e] = f} 
		   OperateEPDuringPeriod[a, e, period[h]] * ep_size_mw[a, e] * eip_cap_factor[a, e, h] * (1-ep_forced_outage_rate[a, e]) * hours_in_sample[h]
		+
		# existing baseload plants
		sum {(a, e, p) in EP_BASELOAD_PERIODS, h in TIMEPOINTS: period[h]=p and ep_fuel[a,e] = f} 
		   OperateEPDuringPeriod[a, e, p] * (1-ep_forced_outage_rate[a, e]) * (1-ep_scheduled_outage_rate[a, e]) * ep_size_mw[a, e] * hours_in_sample[h]
		+
		# Hydro - doesn't include storage and dispatch of stored electrons because this sum is for generation only
		+ ( sum {(a, pid) in PROJ_NONPUMPED_HYDRO, h in TIMEPOINTS: period[h]=p and fuel_hydro = f}
				Dispatch_NonPumped_Hydro[a, pid, h] * hours_in_sample[h] )
			# pumped hydro dispatch of water from upstream
		+ ( sum {(a, pid) in PROJ_PUMPED_HYDRO, h in TIMEPOINTS: period[h]=p and fuel_hydro = f}
				Dispatch_Pumped_Hydro_Watershed_Electrons[a, pid, h] * hours_in_sample[h] )
	  )
	  / total_power_produced_by_period[p]
	;
	
	printf "\n   Transmission Losses=%2d\%\n   Storage Losses=%2d\%\n   Spilled=%2d\%\n", 
		100 * transmission_losses_by_period[p] / total_power_produced_by_period[p], 
		100 * storage_losses_by_period[p]      / total_power_produced_by_period[p], 
		100 * (1 - (total_loads_by_period_weighted[p] + transmission_losses_by_period[p] + storage_losses_by_period[p]) / total_power_produced_by_period[p]);
	
	printf "Total Load  = %.0f\n", total_loads_by_period_weighted[p];
	printf "Total Trans Losses  = %.0f\n", transmission_losses_by_period[p];
	printf "Total Storage Losses  = %.0f\n", storage_losses_by_period[p];
	printf "Total Spilled = %.0f\n", total_power_produced_by_period[p] - total_loads_by_period_weighted[p] - transmission_losses_by_period[p];
	printf "Total Power = %.0f\n", total_power_produced_by_period[p];
	
	printf "\n";
}