#!/bin/sh

# To submit this file, use: `qsub optimize.qsub`

# Job label
#PBS -N test-optimize
# Please keep nodes below 8. Each node has 8 processors & 24GB RAM
#PBS -l nodes=4:ppn=1
# Name of queue to use for this job. `qstat -q` lists the available queues (4 for now). `qstat` without options shows the jobs each queue.
#PBS -q long
# How long you expect the job to run. The PBS scheduler will kill the job after this long. 72h is the maximum. Format is HH:MM:SS
#PBS -l walltime=72:00:00
# Name of the files to direct stdout and stderr. These files will be written to the working directory. 
#PBS -o logs/opt_outfile
#PBS -e logs/opt_errfile
# The scheduler will send updates to this email.
#PBS -M siah@berkeley.edu
# When do you want notifications? a = abort (aka failure), b = begin, e = end (without crashing)
#PBS -m bae
#
# Export all my environment variables to the job. Remove this if you don't want to export them. 
#PBS -V
#

# Update this directory every time before you start the execution. run_switch should set this for you.
working_dir="/global/home/users/siah/AMPL"

# Initialize the environment
cd "$working_dir"          # Go to the working directory
module load ampl-cplex     # Load ampl & cplex. 

# Make a list of problems composed from .nl files that don't have accompanying .sol files. 
problems=$(ls results/*nl | sed -e 's/.nl$//' | while read b; do if [ ! -f "$b.sol" ]; then echo $b; fi; done | tr '\n' ' ')
# Spawn processes across nodes that will Ask CPLEX to solve MIPs
NUM_PROCS=`wc -l $PBS_NODEFILE| awk '{print $1}'`
printf "Starting CPLEX optimization from initiating node\n";
mpirun -v -np $NUM_PROCS ./run_switch.sh --is_worker --num_workers $NUM_PROCS --problems "$problems"
