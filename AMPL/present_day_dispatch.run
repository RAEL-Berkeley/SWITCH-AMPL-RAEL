
include load.run;
##### PRESENT DAY COST OPTIMIZATION #####

problem Present_Day_Cost_Minimization;

# first do a present day cost optimization to determine the current price of power
# this will be done inside ampl instead of closing ampl and then opening cplex because it's quick and not memory intensive
# after this optimization, the model needs to be reset as much of the data is changed with 'update data'
# this is done below by calling 'include windsun.run'

# disable all policy for present day cost minimization (few policy options are currently in place)
let carbon_cost := 0; 
let CARBON_COSTS := { carbon_cost };
let enable_carbon_cap := 0;
let enable_rps := 0;
let enforce_ca_dg_mandate := 0;
redeclare param problem_basename symbolic := results_path & "sol_present_day_dispatch";

# Change file names of exported results. 
let { f in RESULT_FILES} result_file_path_templates[f] := 'present_' & result_file_path_templates[f];
redeclare param InstallGen_tab_path            symbolic := results_path & "present_InstallGen" & carbon_cost & ".tab";
redeclare param OperateEPDuringPeriod_tab_path symbolic := results_path & "present_OperateEPDuringPeriod" & carbon_cost & ".tab";
redeclare param InstallTrans_tab_path          symbolic := results_path & "present_InstallTrans" & carbon_cost & ".tab";
redeclare param InstallLocalTD_tab_path        symbolic := results_path & "present_InstallLocalTD" & carbon_cost & ".tab";
redeclare param ng_consumption_and_prices_by_period_path     symbolic := results_path & "present_ng_consumption_and_prices_by_period_" & carbon_cost & ".tab";
redeclare param biomass_consumption_and_prices_by_period_path     symbolic := results_path & "present_biomass_consumption_and_prices_by_period_" & carbon_cost & ".tab";

# timepoint params used in record_results.run - would be better to reset indexing of timepoints, but I don't know how to do this in AMPL
# these get a bit complicated because the timepoint and date ids need to have different years
# such that if the same date from two different years is picked in the investment optimization, the ids will still remain unique here
# we do this by picking the max_year_simulated_in_each_period, subtracting that off of the timepoint or date id, then adding back in the month/day/hour info
param max_year_simulated_in_each_period { p in PERIODS } = max { h in TIMEPOINTS: period[h] = p} precision(h, 4) / 1000000;
let { h in TIMEPOINTS } present_day_timepoint[h] := 1000000 * ( precision(h, 4) / 1000000 - max_year_simulated_in_each_period[period[h]] + present_year ) + h - precision(h, 4);
let {h in TIMEPOINTS} present_day_date[h] := 10000 * ( precision(date[h], 4) / 10000 - max_year_simulated_in_each_period[period[h]] + present_year ) + date[h] - precision(date[h], 4);

# flag for present day cost optimization to signal record results that we're not looking at the investment optimization
let present_day_optimization := 1;

# slice and dice the timepoints to make one one-year period with the same timepoints that will be included in the subsequent investment optimization
param total_number_of_hours_in_investment_optimization = sum {h in TIMEPOINTS} hours_in_sample[h];
let {h in TIMEPOINTS} hours_in_sample[h] := hours_in_sample[h] * ( 8766 / total_number_of_hours_in_investment_optimization );
let {h in TIMEPOINTS} period[h] := present_year;
# This ensures more gas peakers can be retroactively built. 
let {t in TECHNOLOGIES: t = 'Gas_Combustion_Turbine' } construction_time_years[t] := 0;
let num_years_per_period := 1;
# update system load to present day system loads
let {a in LOAD_AREAS, h in TIMEPOINTS} system_load[a, h] := present_day_system_load[a, h];
# propagate the data changes downstream - this will update capital costs, discounting, constraints, etc.
update data;
# Set default values for all OperateEP and InstallGen variables. A subset of these will be decision variables according to the problem definition in switch.mod
let {(pid, a, t, p) in EP_PERIODS: not intermittent[t] and not hydro[t]} OperateEPDuringPeriod[pid, a, t, p] := 1;
let {(pid, a, t, p) in PROJECT_VINTAGES} InstallGen[pid, a, t, p] := 0;

###############################
# Now actually solve the present day cost optimization problem
# Determine if a present day cost solution already exists. 

# Only compile this problem if neither the solution nor problem file exists. 
if ( (file_exists(solution_path) ==  0) and (file_exists(problem_path) == 0)) then {
  printf "\nCompiling problem file for Present Day Dispatch.\n";
  let curtime := time();
  
  # option auxfiles cfrsu; write ("m" & problem_basename);  # Uncomment this line to write the problem as text files (for debugging)
  
  # write out the problem file for solving by CPLEX
  display problem_basename;
  write ("b" & problem_basename);
  let compile_time := time() - curtime;
  printf "%d seconds to compile and write the problem file.\n", compile_time;
  printf "%d	%d	%s	%d\n", scenario_id, carbon_cost, "Present_Day_Cost_Compilation", compile_time  >> (solution_times_path);
  close (solution_times_path);
} else {
  printf "Skipping compilation because it has already been done.\n";
}

# Only solve the problem and export the results if the solution does not exist. 
if ( file_exists(solution_path) ==  0) then {
  let curtime := time();
  solve;
  let sol_time := time() - curtime;
  printf "%d seconds to optimize for present day cost.\n", sol_time;
  printf "%d	%d	%s	%d\n", scenario_id, carbon_cost, "Present_Day_Cost_Optimization", sol_time  >> (solution_times_path);
  close (solution_times_path);

} 
  # Export the results to csv files and the like. We changed the file names above. 
  printf "Found solution to present-day cost. Exporting results.\n";
  include export.run;
