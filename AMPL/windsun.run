# note: this script should be called from a directory
# holding all the tab files.

reset;
option solver cplexamp;
option cplex_options 'lpdisplay=1 iisfind=1 mipdisplay=1 presolve=1 prestats=1';
# Other options
# Add 'threads=8' for multi-threaded execution.
# Adding 'advance=2' might speed up solutions that work from a similar problem's solution
option presolve 0;
option presolve_eps 1e-10;
# Options to enable automatic substitution of variables without making the program non-linear
option linelim 1;
option substout 1;

# parameter used to track execution times and other management stuff.
param curtime;
param cost_compile_time default -1;
param cost_sol_time default -1;
param trans_sol_time default -1;
param solution_times_path symbolic = "results/run_times.txt";
param file_exists;
param results_path symbolic := 'results/';
# Make the results directory if it doesn't exist.
shell("if [ ! -d " & results_path & " ]; then mkdir " & results_path & "; fi");

model windsun.mod;
set RESULT_FILES;
param result_file_path_templates{RESULT_FILES} symbolic;
param result_header_paths{RESULT_FILES} symbolic;
param output_section symbolic;
data windsun.dat;
param outfile symbolic;

#########################
# Define two "Problems": Investment optimization (with dispatch considerations) and Transmission minimization.
problem Cost_Minimization: 
  # Objective function 
	Power_Cost, 

  # Consumption Decisions (used for RPS)
	ConsumePower, 
  # Consumption Constraints
	Conservation_Of_Energy, Satisfy_Load, 

  # Investment Decisions
	InstallGen, BuildGenOrNot, InstallTrans, InstallLocalTD, 
  # Installation Constraints
	Maximum_Resource_Competing_Tech, Maximum_Resource_Location_Unspecified, Minimum_GenSize, BuildGenOrNot_Constraint, SymetricalTrans, Minimum_LocalTD, 

  # Dispatch Decisions
	DispatchGen, OperateEPDuringPeriod, DispatchEP, DispatchTransFromXToY, Dispatch_NonPumped_Hydro, Dispatch_Pumped_Hydro_Watershed_Electrons, Dispatch_Pumped_Hydro_Storage, Store_Pumped_Hydro,
  # Dispatch Constraints
	Maximum_DispatchGen, EP_Maximum_DispatchGen, Maximum_DispatchTransFromXToY, Maximum_DispatchTransFromXToY_Reserve, 
	Maximum_Dispatch_NonPumped_Hydro, Average_NonPumped_Hydro_Output,        Minimum_Dispatch_NonPumped_Hydro, 
	Maximum_Dispatch_Pumped_Hydro,    Average_Pumped_Hydro_Watershed_Output, Maximum_Store_Pumped_Hydro,
	Conservation_Of_Stored_Pumped_Hydro_Electrons, 

  # Derived variables and the constraints that define them
	Installed_To_Date, Installed_To_Date_by_Period, 
	Power_Produced, EP_Power_Produced, Gross_Power, Net_Power, 
	   Power_From_Dispatchable_Plants,    Power_From_Intermittent_Plants,    Power_From_Baseload_Plants, 
	EP_Power_From_Dispatchable_Plants, EP_Power_From_Intermittent_Plants, EP_Power_From_Baseload_Plants, 

  # Contigency Planning Variables (to ensure that a dispatch plan exists that can meet reserve margins)
	DispatchTransFromXToY_Reserve, Dispatch_NonPumped_Hydro_Reserve, Dispatch_Pumped_Hydro_Watershed_Electrons_Reserve, Dispatch_Pumped_Hydro_Storage_Reserve, Store_Pumped_Hydro_Reserve, 
  # Contigency Planning constraints
	Satisfy_Load_Reserve, 
	Maximum_Dispatch_NonPumped_Hydro_Reserve, Average_NonPumped_Hydro_Output_Reserve,        Minimum_Dispatch_NonPumped_Hydro_Reserve, 
	Maximum_Dispatch_Pumped_Hydro_Reserve,    Average_Pumped_Hydro_Watershed_Output_Reserve, Maximum_Store_Pumped_Hydro_Reserve,
	Conservation_Of_Stored_Pumped_Hydro_Electrons_Reserve
;

problem Transmission_Minimization: 
  # Objective
	Transmission_Usage, 
  # Transmission Dispatch Decisions
	DispatchTransFromXToY, 
  # Consumption Constraints
	Conservation_Of_Energy, Satisfy_Load, 
  # Installation Constraints
	Maximum_Resource_Competing_Tech, Maximum_Resource_Location_Unspecified, Minimum_GenSize, BuildGenOrNot_Constraint, SymetricalTrans, Minimum_LocalTD, 
  # Dispatch Constraints
	Maximum_DispatchGen, EP_Maximum_DispatchGen, Maximum_DispatchTransFromXToY, Maximum_DispatchTransFromXToY_Reserve, 
	Maximum_Dispatch_NonPumped_Hydro, Average_NonPumped_Hydro_Output, Minimum_Dispatch_NonPumped_Hydro, 
	Maximum_Dispatch_Pumped_Hydro,    Average_Pumped_Hydro_Watershed_Output, 
	Maximum_Store_Pumped_Hydro,       Conservation_Of_Stored_Pumped_Hydro_Electrons, 
  # Constraints that define derived variables
	   Power_From_Dispatchable_Plants,    Power_From_Intermittent_Plants,    Power_From_Baseload_Plants, 
	EP_Power_From_Dispatchable_Plants, EP_Power_From_Intermittent_Plants, EP_Power_From_Baseload_Plants, 
  # Contigency Planning constraints
	Satisfy_Load_Reserve, 
	Maximum_Dispatch_NonPumped_Hydro_Reserve, Average_NonPumped_Hydro_Output_Reserve,        Minimum_Dispatch_NonPumped_Hydro_Reserve, 
	Maximum_Dispatch_Pumped_Hydro_Reserve,    Average_Pumped_Hydro_Watershed_Output_Reserve, 
	Maximum_Store_Pumped_Hydro_Reserve,       Conservation_Of_Stored_Pumped_Hydro_Electrons_Reserve
;


table study_hours IN: 
  TIMEPOINTS <- [hour], period, date, hours_in_sample, month_of_year, hour_of_day;
read table study_hours;

table load_areas IN: 
  LOAD_AREAS <- [load_area], load_area_id, economic_multiplier, 
  	max_coincident_load_for_local_td, local_td_new_annual_payment_per_mw, local_td_sunk_annual_payment, transmission_sunk_annual_payment;
read table load_areas;

table rps_load_area_targets IN: 
  [load_area, rps_compliance_year], rps_compliance_fraction;
read table rps_load_area_targets;

table transmission_lines IN: 
  TRANSMISSION_LINES <- [load_area_start, load_area_end], existing_transfer_capacity_mw, transmission_line_id, 
  transmission_length_km, transmission_efficiency;
read table transmission_lines;

table system_load IN: 
  [load_area, hour], system_load;
read table system_load;

table existing_plants IN: 
  EXISTING_PLANTS <- [load_area, plant_code], ep_project_id, 
    ep_size_mw ~ size_mw, ep_technology ~ technology, ep_fuel ~ fuel, ep_heat_rate ~ heat_rate, 
    ep_vintage ~ start_year, ep_max_age_years ~ max_age, 
    ep_overnight_cost ~ overnight_cost, ep_fixed_o_m ~ fixed_o_m, ep_variable_o_m ~ variable_o_m,
    ep_forced_outage_rate ~ forced_outage_rate, ep_scheduled_outage_rate ~ scheduled_outage_rate, 
    ep_baseload ~ baseload, ep_cogen ~ cogen, ep_intermittent ~ intermittent;
read table existing_plants;

table existing_intermittent_plant_cap_factor IN: 
  EP_INTERMITTENT_HOURS <- [load_area, plant_code, hour], eip_cap_factor ~ cap_factor;
read table existing_intermittent_plant_cap_factor;

table hydro IN: 
  PROJ_HYDRO_DATES <- [load_area, hydro_project_id, date], hydro_technology ~ technology, hydro_technology_id ~ technology_id, 
  hydro_capacity_mw ~ capacity_mw, avg_hydro_output ~ avg_output;
read table hydro;

table proposed_projects IN: 
  PROJECTS <- [project_id, load_area, technology], project_location ~ location_id, 
    capacity_limit, capacity_limit_conversion, connect_cost_per_mw, price_and_dollar_year, 
    overnight_cost, fixed_o_m, variable_o_m, overnight_cost_change, nonfuel_startup_cost;
read table proposed_projects;

# If a project's location id is 0, it means that project hasn't been assigned a geographic location that is more specific than a load area.
for {(pid, a, t) in PROJECTS: project_location[pid, a, t] == 0} {
	let project_location[pid, a, t] := location_unspecified;
}

table competing_locations IN:
	LOCATIONS_WITH_COMPETING_TECHNOLOGIES <- [location_id];
read table competing_locations;


table cap_factor IN: 
  PROJ_INTERMITTENT_HOURS <- [project_id, load_area, technology, hour], cap_factor;
read table cap_factor;

table generator_info IN:  
	TECHNOLOGIES <- [technology], technology_id, min_build_year, fuel, heat_rate, construction_time_years,
 	year_1_cost_fraction, year_2_cost_fraction, year_3_cost_fraction, year_4_cost_fraction, year_5_cost_fraction, year_6_cost_fraction,
	max_age_years, forced_outage_rate, scheduled_outage_rate,
	intermittent, resource_limited, new_baseload ~ baseload, min_build_capacity, 
	min_dispatch_fraction, min_runtime, min_downtime, max_ramp_rate_mw_per_hour, startup_fuel_mbtu;
read table generator_info;

# Mark which technologies will be competing for space
for { t in SOLAR_CSP_TECHNOLOGIES } {
  let technologies_compete_for_space[t] := 1;
}
let technologies_compete_for_space['Central_PV'] := 1;

table fuel_costs IN:
	[load_area, fuel, year], fuel_price;
read table fuel_costs;

table fuel_info IN:
	FUELS <- [fuel], rps_fuel_category, carbon_content;
read table fuel_info;

table fuel_qualifies_for_rps IN:
	LOAD_AREAS_AND_FUEL_CATEGORY <- [load_area, rps_fuel_category], fuel_qualifies_for_rps ~ qualifies;
read table fuel_qualifies_for_rps; 

###################################
# parameters used for reporting total generation and transmission

# name of the scenario
param scenario_id symbolic;
read scenario_id <scenario_id.txt;

# Whether or not to consider Renewable Portfolio Standards
read enable_rps < enable_rps.txt;

redeclare param rps_fuel_category {FUELS} symbolic;
if (enable_rps = 0) then {
	drop Satisfy_RPS;
	let LOAD_AREAS_AND_FUEL_CATEGORY := setof{a in LOAD_AREAS} (a,'na');
	let {f in FUELS} rps_fuel_category[f] := 'na';
} 
redeclare param rps_fuel_category {FUELS} symbolic in RPS_FUEL_CATEGORY;


check;

# create cost fraction parameter for cost calculations and discounting for new and existing plants
# param cost_fraction { t in TECHNOLOGIES, yr in YEAR_OF_CONSTRUCTION };
for { t in TECHNOLOGIES } {
	let cost_fraction[t,0] := year_1_cost_fraction[t];
	let cost_fraction[t,1] := year_2_cost_fraction[t];
	let cost_fraction[t,2] := year_3_cost_fraction[t];
	let cost_fraction[t,3] := year_4_cost_fraction[t];
	let cost_fraction[t,4] := year_5_cost_fraction[t];
	let cost_fraction[t,5] := year_6_cost_fraction[t];
}
;

param Gross_Power_by_Period {p in PERIODS}; 
param Transmission_Losses_by_Period {p in PERIODS};
param Storage_Losses_by_Period {p in PERIODS}; 
param Capital_Payments_by_Plant_and_Period { (pid, a, t) in PROJECTS, p in PERIODS }; 
param EP_Capital_Payments_by_Plant_and_Period { (a, e, p) in EP_PERIODS }; 
param Fixed_OM_by_Plant_and_Period { (pid, a, t) in PROJECTS, p in PERIODS }; 
param EP_Fixed_OM_by_Plant_and_Period { (a, e, p) in EP_PERIODS }; 
param Carbon_Emissions { (pid, a, t) in PROJECTS, h in TIMEPOINTS }; 
param EP_Carbon_Emissions { (a, e, h) in EP_AVAILABLE_HOURS }; 
param Carbon_Cost_Incurred_Hourly { (pid, a, t) in PROJECTS, h in TIMEPOINTS }; 
param EP_Carbon_Cost_Incurred_Hourly { (a, e, h) in EP_AVAILABLE_HOURS }; 
param Fuel_Cost_Incurred_Hourly { (pid, a, t) in PROJECTS, h in TIMEPOINTS }; 
param EP_Fuel_Cost_Incurred_Hourly { (a, e, h) in EP_AVAILABLE_HOURS }; 
param Variable_Cost_Incurred_Hourly { (pid, a, t) in PROJECTS, h in TIMEPOINTS }; 
param EP_Variable_Cost_Incurred_Hourly { (a, e, h) in EP_AVAILABLE_HOURS }; 
param Power_Cost_Per_Period {p in PERIODS};
param Carbon_Costs_Per_Period_per_MWh {p in PERIODS};
