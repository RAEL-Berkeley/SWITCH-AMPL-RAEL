trap "ampl_lic stop;" EXIT INT TERM

job_path=$(mktemp -p tmp dispatch_all-XXX);
prob_num=0
# Iterate over test sets
cat test_set_ids.txt | while read test_set_id test_path; do
  worker=$(( $prob_num % $NUM_WORKERS ));
  echo "\
    find $test_path/results -name '*nl' -size 0 -exec rm {} \; ; \
    find $test_path/results -name '*sol' -size 0 -exec rm {} \; ; \
    echo \"\$(hostname)\" >logs/${test_set_id}_dispatch.log; \
    echo \"\$(date)\" >>logs/${test_set_id}_dispatch.log; \
    cp logs/${test_set_id}_dispatch.log logs/${test_set_id}_dispatch.err; \
    echo \"\
      cd $test_path; \
      include dispatch_one_test_set.run; \
    \" | ampl 1>>logs/${test_set_id}_dispatch.log 2>>logs/${test_set_id}_dispatch.err;"
  prob_num=$(($prob_num+1))
done > $job_path

for worker in $(seq 0 $(($NUM_WORKERS-1))); do 
  echo "echo 'this worker finished last job at '\$(date); ampl_lic return ampl; ampl_lic stop;" >> $job_path
done

if [ "$cluster_name" = "psi" ]; then 
  pids=''
  for worker in $(seq 0 $(($NUM_WORKERS-1))); do 
    echo "worker command is: 'execute_jobs.pl $job_path $worker $NUM_WORKERS'"
    ./execute_jobs.pl $job_path $worker $NUM_WORKERS &
    pids="$pids "$!
  done
  still_running=$NUM_WORKERS
  while [ $still_running -gt 0 ]; do
    still_running=0
    for worker_pid in $(echo "$pids"); do
      if [ $(ps -p $worker_pid | wc -l | awk '{print $1}') -gt 1 ]; then
        still_running=$(($still_running + 1))
      fi
    done
    sleep 2
  done
else
  mpirun -v -np $NUM_WORKERS ./execute_jobs.pl $job_path;
fi

rm $job_path

./summarize_results.py
