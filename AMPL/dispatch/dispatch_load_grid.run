###############################
# Load the investment decisions
let curtime := time();

# Make links to the files containing investment decisions for this carbon cost
shell( "for f in InstallGen OperateEPDuringPeriod InstallTrans InstallLocalTD; do ln -sf ${f}" & carbon_cost & ".tab inputs/$f.tab; done" );
shell( "mv inputs/ng_supply_curve.tab inputs/ng_supply_curve.tab.actual; ln -sf ng_consumption_and_prices_by_period_" & carbon_cost & ".tab inputs/ng_supply_curve.tab;" );
shell( "mv inputs/biomass_supply_curve.tab inputs/biomass_supply_curve.tab.actual; ln -sf biomass_consumption_and_prices_by_period_" & carbon_cost & ".tab inputs/biomass_supply_curve.tab;" );
read table TableInstallGen;
read table TableOperateEPDuringPeriod;
read table TableInstallTrans;
read table TableInstallLocalTD;
# Overwrite the natural gas supply curve with the price and consumption data generated by the 
# primary optimization for this carbon cost. 
reset data ng_consumption_breakpoint ng_consumption_breakpoint_raw ng_price_surplus_adjusted;
read table ng_supply_curve;
let { (p, bp) in NG_SUPPLY_CURVE_PERIOD_BREAKPOINTS: bp <= (num_ng_breakpoints[p]-1) } 
  ng_consumption_breakpoint[p,bp] := ng_consumption_breakpoint_raw[p, bp];
update data;
close;

# Overwrite the biomass supply curve with the price and consumption data generated by the 
# primary optimization for this carbon cost. 
reset data biomass_breakpoint_mmbtu_per_year_raw biomass_breakpoint_mmbtu_per_year biomass_price_dollars_per_mmbtu_surplus_adjusted;
read table biomass_supply_curve;
let { (a, p, bp) in LOAD_AREAS_AND_BIO_BREAKPOINTS: bp <= (num_bio_breakpoints[a, p]-1) } 
  biomass_breakpoint_mmbtu_per_year[a,p,bp] := biomass_breakpoint_mmbtu_per_year_raw[a,p,bp];
update data;
close;

# Remove the links
shell( "for f in InstallGen OperateEPDuringPeriod InstallTrans; do p=inputs/$f.tab; if [ -L $p ]; then rm $p; fi; done" );
shell( "if [ -L inputs/ng_supply_curve.tab ]; then rm inputs/ng_supply_curve.tab; mv inputs/ng_supply_curve.tab.actual inputs/ng_supply_curve.tab; fi" );
shell( "if [ -L inputs/biomass_supply_curve.tab ]; then rm inputs/biomass_supply_curve.tab; mv inputs/biomass_supply_curve.tab.actual inputs/biomass_supply_curve.tab; fi" );

# Copy data into fixed decision variables. 
for {(pid, a, t, p) in PROJECT_VINTAGES} {
  let InstallGen[pid, a, t, p] := max(InstallGen_Init[pid, a, t, p], 0);
}
for {(a1, a2, p) in TRANSMISSION_LINE_NEW_PERIODS} {
  let InstallTrans[a1, a2, p] := InstallTrans_Init[a1, a2, p];
}
for {a in LOAD_AREAS, p in PERIODS} {
  let InstallLocalTD[a, p] := InstallLocalTD_Init[a, p];
}
for {(pid, a, t, p) in EP_PERIODS_ALL} {
  let OperateEPDuringPeriod[pid, a, t, p] := OperateEPDuringPeriod_Init[pid, a, t, p];
}

printf "%d seconds to load investment decisions from disk for carbon cost %d.\n", (time() - curtime), carbon_cost;
