# Describe extra capacity needed.
for {p in PERIODS } {
  printf "%d: %.3f additional capacity installed (%.3f peakers, %.3f storage).\n", p, 
    (sum{(pid, a, t, p) in PROJECT_VINTAGES_ALL: t='Gas_Combustion_Turbine' or storage[t]} (InstallGen[pid, a, t, p] - InstallGen_Init[pid, a, t, p])),
    (sum{(pid, a, t, p) in PROJECT_VINTAGES_ALL: t='Gas_Combustion_Turbine'} (InstallGen[pid, a, t, p] - InstallGen_Init[pid, a, t, p])),
    (sum{(pid, a, t, p) in PROJECT_VINTAGES_ALL: storage[t]                } (InstallGen[pid, a, t, p] - InstallGen_Init[pid, a, t, p]));
  printf {a in LOAD_AREAS: (sum{(pid, a, t, p) in PROJECT_VINTAGES_ALL: t='Gas_Combustion_Turbine' or storage[t]} (InstallGen[pid, a, t, p] - InstallGen_Init[pid, a, t, p])) > 0 } 
    "\t%s : %.3f additional capacity installed (%.3f peakers, %.3f storage).\n", a, 
      (sum{(pid, a, t, p) in PROJECT_VINTAGES_ALL: t='Gas_Combustion_Turbine' or storage[t]} (InstallGen[pid, a, t, p] - InstallGen_Init[pid, a, t, p])),
      (sum{(pid, a, t, p) in PROJECT_VINTAGES_ALL: t='Gas_Combustion_Turbine'} (InstallGen[pid, a, t, p] - InstallGen_Init[pid, a, t, p])),
      (sum{(pid, a, t, p) in PROJECT_VINTAGES_ALL: storage[t]                } (InstallGen[pid, a, t, p] - InstallGen_Init[pid, a, t, p]));
}  
