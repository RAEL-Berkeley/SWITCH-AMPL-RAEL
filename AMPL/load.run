# load.run
# SYNOPSIS
#   include load.run;
# DESCRIPTION
#   Loads the SWITCH model and input data that was exported with get_switch_input_tables.sh. Also sets policy options according to the input scenario.
reset;

############################################################
# Utility Functions that interact with the operating system
# get_num_cores() determines how many processor cores are on the current machine. Works on OS X & Linux.
function get_num_cores pipe "while read junk; do if [ `uname` = 'Darwin' ]; then sysctl hw.ncpu | awk '{print $2}'; elif [ `uname` = 'Linux' ]; then cat /proc/cpuinfo | grep processor | wc -l | awk '{print $1}'; else echo 1; fi; done;";
# file_exists(file_path) determines whether a file exists at the specified path (relative or absolute). Returns a 1 or a 0. Works on OS X & Linux.
function file_exists pipe 'while read file_path; do if [ -f "$file_path" ]; then echo 1; else echo 0; fi; done;';

###################################
# Make directories for results and logs if they don't exist.
param results_path symbolic := 'results/';
param solution_times_path symbolic = "results/run_times.txt";
shell("if [ ! -d " & results_path & " ]; then mkdir " & results_path & "; fi");
shell("if [ ! -d logs ]; then mkdir logs; fi");
# Make a file header for solution time if it doesn't exist.
if ( file_exists(solution_times_path) == 0 )
then {
  printf "scenario_id	carbon_cost	process_type	completed_at	time_seconds\n"
  > (solution_times_path);
  close (solution_times_path);
}

###################################
# These AMPL & cplex options must be set before the model is included. 
option presolve 0, presolve_eps 1e-10;
# Options to enable automatic substitution of variables without making the program non-linear
option substout 1, linelim 1;
# Options to enable timing of compilation
# option show_stats 1, times 1, gentimes 1;
option solver cplexamp;
option cplex_options (" lpdisplay=1 iisfind=1 mipdisplay=2 presolve=1 prestats=1 timing=1 nodefile=2 treememory=15000 threads=6" );
option cplex_options > results/cplex_options;


# Include other AMPL code files. 
model switch.mod;
include define_params.run;
data switch.dat;
data inputs/misc_params.dat;



#########################
# Read in data from tab files exported from mysql by get_switch_input_tables.sh

table study_hours "inputs/study_hours.tab" IN: 
  TIMEPOINTS <- [hour], period, date, hours_in_sample, month_of_year, hour_of_day;
read table study_hours;

table load_areas "inputs/load_areas.tab" IN: 
  LOAD_AREAS <- [load_area], load_area_id, balancing_area, economic_multiplier, 
  	max_coincident_load_for_local_td, local_td_new_annual_payment_per_mw, local_td_sunk_annual_payment, transmission_sunk_annual_payment;
read table load_areas;

table balancing_areas "inputs/balancing_areas.tab" IN:
  BALANCING_AREAS <- [balancing_area], load_only_spinning_reserve_requirement, wind_spinning_reserve_requirement, solar_spinning_reserve_requirement, quickstart_requirement_relative_to_spinning_reserve_requirement;
read table balancing_areas;

table rps_load_area_targets "inputs/rps_load_area_targets.tab" IN: 
  [load_area, rps_compliance_year], rps_compliance_fraction;
read table rps_load_area_targets;

table carbon_cap_targets "inputs/carbon_cap_targets.tab" IN: 
  [year], carbon_emissions_relative_to_base;
read table carbon_cap_targets;

table transmission_lines "inputs/transmission_lines.tab" IN: 
  TRANSMISSION_LINES <- [load_area_start, load_area_end], existing_transfer_capacity_mw, transmission_line_id, 
  transmission_length_km, transmission_efficiency, new_transmission_builds_allowed;
read table transmission_lines;

table system_load "inputs/system_load.tab" IN: 
  [load_area, hour], system_load, present_day_system_load;
read table system_load;

table max_system_loads "inputs/max_system_loads.tab" IN: 
  [load_area, period], max_system_load;
read table max_system_loads;

table existing_plants "inputs/existing_plants.tab" IN: 
  EXISTING_PLANTS <- [project_id, load_area, technology], 
  	ep_plant_name ~ plant_name, ep_eia_id ~ eia_id,
    ep_capacity_mw ~ capacity_mw, ep_heat_rate ~ heat_rate, ep_cogen_thermal_demand ~ cogen_thermal_demand_mmbtus_per_mwh,
    ep_vintage ~ start_year,  
    ep_overnight_cost ~ overnight_cost, ep_fixed_o_m ~ fixed_o_m, ep_variable_o_m ~ variable_o_m,
    ep_location_id;
read table existing_plants;

table existing_intermittent_plant_cap_factor "inputs/existing_intermittent_plant_cap_factor.tab" IN: 
  EP_INTERMITTENT_HOURS <- [project_id, load_area, technology, hour], eip_cap_factor ~ cap_factor;
read table existing_intermittent_plant_cap_factor;

table hydro_monthly_limits "inputs/hydro_monthly_limits.tab" IN: 
  PROJ_HYDRO_DATES <- [project_id, load_area, technology, date] avg_hydro_output ~ avg_output;
read table hydro_monthly_limits;

table proposed_projects "inputs/proposed_projects.tab" IN: 
  PROJECTS <- [project_id, load_area, technology], project_location ~ location_id, ep_project_replacement_id,
    capacity_limit, capacity_limit_conversion, heat_rate, connect_cost_per_mw, price_and_dollar_year, 
    overnight_cost, fixed_o_m, variable_o_m, overnight_cost_change;
read table proposed_projects;

table cap_factor "inputs/cap_factor.tab" IN: 
  PROJ_INTERMITTENT_HOURS <- [project_id, load_area, technology, hour], cap_factor;
read table cap_factor;

table generator_info "inputs/generator_info.tab" IN:  
	TECHNOLOGIES <- [technology], technology_id, min_build_year, fuel, construction_time_years,
 	year_1_cost_fraction, year_2_cost_fraction, year_3_cost_fraction, year_4_cost_fraction, year_5_cost_fraction, year_6_cost_fraction,
	max_age_years, forced_outage_rate, scheduled_outage_rate,
	can_build_new, ccs, intermittent, resource_limited, baseload, dispatchable, cogen, min_build_capacity, competes_for_space,
	storage, storage_efficiency, max_store_rate, max_spinning_reserve_fraction_of_capacity, heat_rate_penalty_spinning_reserve;
read table generator_info;

table fuel_costs "inputs/fuel_costs.tab" IN:
	[load_area, fuel, year], fuel_price;
read table fuel_costs;

table biomass_supply_curve_slope "inputs/biomass_supply_curve_slope.tab" IN:
	LOAD_AREAS_AND_BIO_BREAKPOINTS <- [load_area, breakpoint_id], price_dollars_per_mbtu;
read table biomass_supply_curve_slope;

table biomass_supply_curve_breakpoint "inputs/biomass_supply_curve_breakpoint.tab" IN:
	[load_area, breakpoint_id], breakpoint_mbtus_per_year;
read table biomass_supply_curve_breakpoint;

table fuel_info "inputs/fuel_info.tab" IN:
	FUELS <- [fuel], rps_fuel_category, biofuel, carbon_content;
read table fuel_info;
let FUELS := FUELS union {"Storage"};

table fuel_qualifies_for_rps "inputs/fuel_qualifies_for_rps.tab" IN:
	LOAD_AREAS_AND_FUEL_CATEGORY <- [load_area, rps_fuel_category], fuel_qualifies_for_rps ~ qualifies;
read table fuel_qualifies_for_rps; 

###################################
# update some params that can't be easily dealt with elsewhere

# create cost fraction parameter for cost calculations and discounting for new and existing plants
# param cost_fraction { t in TECHNOLOGIES, yr in YEAR_OF_CONSTRUCTION };
for { t in TECHNOLOGIES } {
	let cost_fraction[t,0] := year_1_cost_fraction[t];
	let cost_fraction[t,1] := year_2_cost_fraction[t];
	let cost_fraction[t,2] := year_3_cost_fraction[t];
	let cost_fraction[t,3] := year_4_cost_fraction[t];
	let cost_fraction[t,4] := year_5_cost_fraction[t];
	let cost_fraction[t,5] := year_6_cost_fraction[t];
}
;

###################################
# Change the problem to remove policy constraints that are not in effect
problem Investment_Cost_Minimization;
if (enable_rps = 0) then { drop Satisfy_RPS; } 
if (enable_carbon_cap = 0) then { drop Carbon_Cap; } 
# Simplify transmission & storage if RPS is not in effect
redeclare param rps_fuel_category {FUELS} symbolic;
if (enable_rps = 0) then {
  let LOAD_AREAS_AND_FUEL_CATEGORY := setof{a in LOAD_AREAS} (a,'na');
  let {f in FUELS} rps_fuel_category[f] := 'na';
} 
redeclare param rps_fuel_category {FUELS} symbolic in RPS_FUEL_CATEGORY;


############################################################

# Make sure the model has valid data
check;

