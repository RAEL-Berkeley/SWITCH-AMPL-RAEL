# Read in values for each sub-problem
for {tp in PERIODS} {
  let target_period := tp;

  # Read the subproblem's objective value
  read sub_prob_objective_values[iteration, target_period] < (Power_Cost_Lagrangian_sub_path);
  close;

  # Make links to results from one subproblem so AMPL's stupid table reader can find the input data.
  shell( "ln -sf " 
    & sub(InstallGen_sub_tab_path, results_path, '') & " " 
    & InstallGen_generic_tab_path );
  shell( "ln -sf " 
    & sub(InstallStorageEnergyCapacity_sub_tab_path, results_path, '') & " " 
    & InstallStorageEnergyCapacity_generic_tab_path );
  shell( "ln -sf " 
    & sub(BuildGenOrNot_sub_tab_path, results_path, '') & " " 
    & BuildGenOrNot_generic_tab_path );
  shell( "ln -sf " 
    & sub(OperateEPDuringPeriod_sub_tab_path, results_path, '') & " " 
    & OperateEPDuringPeriod_generic_tab_path );
  shell( "ln -sf " 
    & sub(InstallTrans_sub_tab_path, results_path, '') & " " 
    & InstallTrans_generic_tab_path );
  shell( "ln -sf " 
    & sub(InstallLocalTD_sub_tab_path, results_path, '') & " " 
    & InstallLocalTD_generic_tab_path );

  # Read in data from one sub-problem
  read table TableInstallGen_SUB;
  read table TableInstallStorageEnergyCapacity_SUB;
  read table TableBuildGenOrNot_SUB;
  read table TableInstallTrans_SUB;
  read table TableInstallLocalTD_SUB;
  read table TableOperateEPDuringPeriod_SUB;
  close;
 
  # Remove the links
  shell( "rm -f " & InstallGen_generic_tab_path );
  shell( "rm -f " & InstallStorageEnergyCapacity_generic_tab_path );
  shell( "rm -f " & BuildGenOrNot_generic_tab_path );
  shell( "rm -f " & OperateEPDuringPeriod_generic_tab_path );
  shell( "rm -f " & InstallTrans_generic_tab_path );
  shell( "rm -f " & InstallLocalTD_generic_tab_path );
  
}

# Divide to get the average..
let { (pid, a, t, p) in PROJECT_VINTAGES: include_subproblem[p] } 
  InstallGen_LGN_AVG[pid, a, t, p] := 
    ( sum { (pid, a, t, p, tp) in PROJECT_VINTAGES_LGN }
      InstallGen_SUB_ALL[ pid, a, t, p, tp ] 
    ) / num_subproblems;
let { (pid, a, t, p) in PROJECT_VINTAGES: storage[t] and include_subproblem[p]} 
  InstallStorageEnergyCapacity_LGN_AVG[pid, a, t, p] := 
    ( sum { (pid, a, t, p, tp) in PROJECT_VINTAGES_LGN }
      InstallStorageEnergyCapacity_SUB_ALL[ pid, a, t, p, tp ] 
    ) / num_subproblems;
let { (pid, a, t, p) in PROJECT_VINTAGES: min_build_capacity[t] > 0 and include_subproblem[p] } 
  BuildGenOrNot_LGN_AVG[pid, a, t, p] := 
    ( sum { (pid, a, t, p, tp) in PROJECT_VINTAGES_LGN }
      BuildGenOrNot_SUB_ALL[ pid, a, t, p, tp ] 
    ) / num_subproblems;
let { (pid, a, t, p) in EP_PERIODS: not intermittent[t] and not hydro[t] and include_subproblem[p]} 
  OperateEPDuringPeriod_LGN_AVG[pid, a, t, p] := 
    ( sum { (pid, a, t, p, tp) in EP_PERIODS_LGN }
      OperateEPDuringPeriod_SUB_ALL[ pid, a, t, p, tp ] 
    ) / num_subproblems;
let { (a1, a2, p) in TRANSMISSION_LINE_NEW_PERIODS: include_subproblem[p] } 
  InstallTrans_LGN_AVG[a1, a2, p] := 
    ( sum { (a1, a2, p, tp) in TRANSMISSION_LINE_NEW_PERIODS_LGN }
      InstallTrans_SUB_ALL[ a1, a2, p, tp ] 
    ) / num_subproblems;
let { a in LOAD_AREAS, p in PERIODS: include_subproblem[p] } 
  InstallLocalTD_LGN_AVG[a, p] := 
    ( sum { (a, p, tp) in LOCAL_TD_NEW_PERIODS_LGN }
      InstallLocalTD_SUB_ALL[ a, p, tp ] 
    ) / num_subproblems;
