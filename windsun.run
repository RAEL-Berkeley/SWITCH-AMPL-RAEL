# note: this script should be called from a directory
# holding all the tab files.

reset;
if match($version, 'Darwin') > 0 then {
  #option solver cbc;
  # note: you also need to use codeweavers to open the ampl1 bottle and then call wine --cx-app=ilmd.exe
  option solver cplexamp;
#  Old setting for single-threaded execution
#  option cplex_options 'primalopt lpdisplay=1 mipdisplay=1';
# New settings for multi-threaded execution
#  option cplex_options 'lpdisplay=1 threads=8 mipdisplay=1';
  option cplex_options 'lpdisplay=1 iisfind=1 mipdisplay=1';
} else {
  option solver cplexamp;
#  Old setting for single-threaded execution
#  option cplex_options 'lpdisplay=1 threads=6 mipdisplay=1';
# New settings for multi-threaded execution
  option cplex_options 'lpdisplay=1 threads=8 mipdisplay=1';
}
option presolve 0;

model windsun.mod;

data windsun.dat;

table study_hours IN: HOURS <- [hour], period, date, hours_in_sample, month_of_year, hour_of_day;
read table study_hours;

table load_zones IN: LOAD_ZONES <- [load_zone], load_zone_x, load_zone_y;
read table load_zones;

table regional_plant_cost_multiplier IN: 
	[load_zone], regional_plant_cost_multiplier;
read table regional_plant_cost_multiplier;

table regional_fuel_costs IN:
	[load_zone, fuel, year], fuel_cost;
read table regional_fuel_costs;

table existing_plants IN: 
  EXISTING_PLANTS <- [load_zone, plant_code], 
    ep_size_mw ~ size_mw, ep_fuel ~ fuel, ep_heat_rate ~ heat_rate, 
    ep_vintage ~ start_year, ep_max_age_years ~ max_age, 
    ep_overnight_cost ~ overnight_cost, ep_fixed_o_m ~ fixed_o_m, ep_variable_o_m ~ variable_o_m,
    ep_forced_outage_rate ~ forced_outage_rate, ep_scheduled_outage_rate ~ scheduled_outage_rate, 
    ep_baseload ~ baseload, ep_cogen ~ cogen;
read table existing_plants;

table generator_info IN:  
	TECHNOLOGIES <- [technology], min_build_year, fuel, heat_rate, construction_time_years,
	max_age_years, forced_outage_rate, scheduled_outage_rate,
	intermittent, resource_limited, new_baseload ~ baseload, min_build_capacity;
read table generator_info;

table regional_generator_costs IN:  
	REGIONAL_TECHNOLOGIES <- [load_zone, technology], price_year, overnight_cost,
	connect_cost_per_MW_generic, fixed_o_m, variable_o_m, overnight_cost_change,
	fixed_o_m_change, variable_o_m_change;
read table regional_generator_costs;

table trans_lines IN: 
  TRANS_LINES <- [load_zone_start, load_zone_end], existing_transmission, tid, 
  transmission_length_km, transmission_efficiency;
read table trans_lines;

table system_load IN: [load_zone, hour], system_load;
read table system_load;

table max_capacity IN: 
  PROJ_RESOURCE_LIMITED <- [load_zone, technology, site, orientation], max_capacity;
read table max_capacity;

table connect_cost IN: 
  [load_zone, technology, site, orientation], connect_length_km, connect_cost_per_MW;
read table connect_cost;

table cap_factor IN: 
  PROJ_INTERMITTENT_HOURS <- [load_zone, technology, site, orientation, hour], cap_factor;
read table cap_factor;

table hydro IN: 
  PROJ_HYDRO_DATES <- [load_zone, site, date], 
  avg_hydro_flow ~ avg_flow, min_hydro_flow ~ min_flow, max_hydro_flow ~ max_flow;
read table hydro;

#solve;

# display Power_Cost / system_load_discounted;

# set and parameters used to make carbon cost curves
set CARBON_COSTS;

# parameter used to track execution times
param curtime;

# parameters used for reporting total generation and transmission

# name of the scenario
param scenario_name symbolic;
read scenario_name <scenario_name.txt;

# years and hours to report
set STUDY_YEARS ordered = PERIODS;
param last_hour_of_year {y in STUDY_YEARS} = max {h in HOURS: period[h]= y} h;
param first_hour_of_year {y in STUDY_YEARS} = min {h in HOURS: period[h] = y} h;
param samples_in_year {y in STUDY_YEARS} = 
  card({h in HOURS: period[h]=y});
set ZONAL_REPORTING_YEARS ordered = {last(STUDY_YEARS)};
set ZONAL_REPORTING_HOURS ordered = {h in HOURS: period[h] in ZONAL_REPORTING_YEARS};

# parameters to report transmission and generation from various sources, in each load zone
set TECHNOLOGIES_INTERMITTENT = setof {t in TECHNOLOGIES: intermittent[t]} (t);
set TECHNOLOGIES_DISPATCH = setof {(z, t, s, o) in PROJ_DISPATCH} (t);
param total_gen {LOAD_ZONES, TECHNOLOGIES, STUDY_YEARS} default 0;
param surplus_gen {LOAD_ZONES, TECHNOLOGIES_INTERMITTENT, STUDY_YEARS} default 0;
param intermittent_surplus_fraction {LOAD_ZONES, HOURS} default 0;
param total_gen_installed {t in TECHNOLOGIES, y in STUDY_YEARS};
param total_trans {TRANS_LINES, STUDY_YEARS} default 0;
param avg_gen_by_zone {LOAD_ZONES, TECHNOLOGIES} default 0, >= 0;
param avg_surp_by_zone {LOAD_ZONES, TECHNOLOGIES_INTERMITTENT} default 0, >= 0;
param avg_load_by_zone {LOAD_ZONES} default 0, >= 0;
param avg_gen_by_year {STUDY_YEARS, TECHNOLOGIES} default 0, >= 0;
param avg_surp_by_year {STUDY_YEARS, TECHNOLOGIES_INTERMITTENT} default 0, >= 0;
param avg_load_by_year {STUDY_YEARS} default 0, >= 0;
param power_cost_by_year {STUDY_YEARS} >= 0;
param outfile symbolic;
